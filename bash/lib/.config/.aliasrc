#!/bin/bash

##############################
##### Generic Shortcuts ######
##############################
alias \
	l="ls -ACG" \
	ll="ls -alG" \
	reload="source ~/.bash_profile"

##############################
##### Document Functions #####
##############################

require () {
	command -v "$1" >/dev/null 2>&1 || { echo >&2 "I require "$1" but it's not installed.  Aborting."; exit 1; }
}

checkDeps () {
	require "pandoc"
}

pdf2jpg (){
	require "convert"
	if [ -z "${1}" ]; then
		echo "You need to specify the markdown file"
		exit 0
	fi

	if [ -z "${2}" ]; then
		filename_without_ext=`rev <<< "${1}" | cut -d"." -f2- | rev`
	  pdf_filename="${filename_without_ext}"
	else
		pdf_filename="${2}"
	fi

	convert -quality 100 -density 600x600 "${pdf_filename}".pdf "${pdf_filename}"%d.jpg
}

md2slides () {
	checkDeps
	if [ -z "${1}" ]; then
		echo "You need to specify the markdown file"
		exit 0
	fi

	if [ -z "${2}" ]; then
		filename_without_ext=`rev <<< "${1}" | cut -d"." -f2- | rev`
	  pdf_filename="${filename_without_ext}.pdf"
	else
		pdf_filename="${2}"
	fi

	pandoc -o "${pdf_filename}" -t beamer "${1}"
}

docx2md () {
	checkDeps
	if [ -z "${1}" ]; then
		echo "You need to specify the markdown file"
		exit 0
	fi

	if [ -z "${2}" ]; then
		filename_without_ext=`rev <<< "${1}" | cut -d"." -f2- | rev`
	  pdf_filename="${filename_without_ext}.md"
	else
		pdf_filename="${2}"
	fi

	pandoc -o "${pdf_filename}" -s "${1}" -t markdown
}

md2docx () {
	checkDeps
	if [ -z "${1}" ]; then
		echo "You need to specify the markdown file"
		exit 0
	fi

	if [ -z "${2}" ]; then
		filename_without_ext=`rev <<< "${1}" | cut -d"." -f2- | rev`
	  pdf_filename="${filename_without_ext}.docx"
	else
		pdf_filename="${2}"
	fi

	pandoc -o "${pdf_filename}" -s "${1}"
}

md2pdf () {
	checkDeps
	if [ -z "${1}" ]; then
		echo "You need to specify the markdown file"
		exit 0
	fi

	if [ -z "${2}" ]; then
		filename_without_ext=`rev <<< "${1}" | cut -d"." -f2- | rev`
	  pdf_filename="${filename_without_ext}.pdf"
	else
		pdf_filename="${2}"
	fi

	pandoc -o "${pdf_filename}" -s "${1}"
}

##############################
############ Git #############
##############################
alias \
	gs="git status -sb" \
  gsv="git status -vvb" \
  ga="git add" \
  gr="git rm" \
  gcm="git commit -m" \
  gp="git push" \
  gm="git merge" \
  gc="git checkout" \
  gcb="git checkout -b" \
  gb="git branch -v" \
  gbd="git branch -D" \
  gd="git diff --color-words" \
  gl="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

##############################
######## Git Watchers ########
##############################
alias \
	gsw="watch 'git status -sb'" \
	gbw="watch 'git branch -v'"

##############################
############ Yarn ############
##############################
alias \
	y='yarn' \
  ya='yarn add' \
  yrm='yarn remove' \
  yu='yarn upgrade-interactive --latest' \
  yga='yarn global add' \
  ygrm='yarn global remove' \
  ygu='yarn global upgrade-interactive --latest'

##############################
######### Use Neovim #########
##############################
command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d"

##############################
########## Commands ##########
##############################
sa() {
		du -a 2> /dev/null | awk '{print $2}' | fzf | xargs $EDITOR;
}

sc() {
	grep -r .* | fzf | awk -F ":" '{print $1}' | xargs $EDITOR;
}

emoji() {
	cat ~/.emoji | fzf | awk '{print $1}'
}
